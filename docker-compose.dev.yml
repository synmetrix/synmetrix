version: '3.8'

networks:
  synmetrix_default:
    external: true

services:
  redis:
    image: redis:7.0.0
    restart: always
    ports:
      - 6379:6379
    networks:
      - synmetrix_default

  postgres:
    image: postgres:${POSTGRES_VERSION}
    restart: always
    ports:
      - 5435:5432
    volumes:
      - pgstorage-data:/var/lib/postgresql/data
      - ./etc/postgres.conf:/var/lib/postgresql/data/postgresql.conf
    env_file:
      - .env
      - .dev.env
    networks:
      - synmetrix_default

  actions:
    build:
      context: ./services/actions/
    restart: always
    command: yarn start.dev
    volumes:
      - ./services/actions/src:/app/src
      - ./services/actions/index.js:/app/index.js
    env_file:
      - .env
      - .dev.env
    networks:
      - synmetrix_default

  cubejs:
    build:
      context: ./services/cubejs
    restart: always
    command: yarn start.dev
    volumes:
      - ./services/cubejs/src:/app/src
      - ./services/cubejs/index.js:/app/index.js
    ports:
      - 4000:4000
      - 9231:9229
      - 13306:13306
      - 15432:15432
    env_file:
      - .env
      - .dev.env
    environment:
      CUBEJS_SCHEDULED_REFRESH: false
    networks:
      - synmetrix_default

  cubejs_refresh_worker:
    build:
      context: ./services/cubejs
    restart: always
    command: yarn start.dev
    volumes:
      - ./services/cubejs/src:/app/src
      - ./services/cubejs/index.js:/app/index.js
    env_file:
      - .env
      - .dev.env
    environment:
      CUBEJS_REFRESH_TIMER: 60
      CUBEJS_SCHEDULED_REFRESH: true
      CUBEJS_SQL_API: false
    networks:
      - synmetrix_default

  hasura_cli:
    build:
      context: ./scripts/containers/hasura-cli
      args:
        HASURA_VERSION: ${HASURA_VERSION}
    restart: always
    command: ./start.sh
    ports:
      - 9695:9695
      - 9693:9693
    env_file:
      - .env
      - .dev.env
    environment:
      ENABLE_TELEMETRY: "false"
      CONSOLE_MODE: cli
    volumes:
      - ./services/hasura/migrations:/hasura/migrations
      - ./services/hasura/metadata:/hasura/metadata
      - ./services/hasura/config.yaml:/hasura/config.yaml
    depends_on:
      - hasura
    networks:
      - synmetrix_default

  hasura:
    image: hasura/graphql-engine:${HASURA_VERSION}
    restart: always
    ports:
      - 8080:8080
    env_file:
      - .env
      - .dev.env
    volumes:
      - ./services/hasura/migrations:/hasura-migrations
      - ./services/hasura/metadata:/hasura-metadata
      - ./services/hasura/seeds:/seeds
    environment:
      ENABLE_TELEMETRY: "false"
      CONSOLE_MODE: server
    depends_on:
      - postgres
      - redis
    networks:
      - synmetrix_default

  hasura_plus:
    build:
      context: ./scripts/containers/hasura-backend-plus
    restart: always
    volumes:
      - ./scripts/containers/hasura-backend-plus/storage-rules/rules.yaml:/app/custom/storage-rules/rules.yaml
    ports:
      - 8081:3000
    env_file:
      - .env
      - .dev.env
    depends_on:
      - postgres
    networks:
      - synmetrix_default

  minio:
    image: minio/minio:latest
    restart: always
    command: server --console-address ":9001" /data
    volumes:
      - minio-data:/data
    ports:
      - 9000:9000
      - 9001:9001
    env_file:
      - .env
      - .dev.env
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - synmetrix_default

  mailhog:
    image: mailhog/mailhog
    restart: always
    logging:
      driver: 'none'
    ports:
      - 1025:1025 # smtp server
      - 8025:8025 # web ui
    networks:
      - synmetrix_default

  client:
    build:
      context: ./services/client/
      args:
        CLIENT_VERSION: ${CLIENT_VERSION}
        ENABLE_MINIO_PROXY: 'true'
        HASURA_GRAPHQL_ENDPOINT: /v1/graphql
        HASURA_WS_ENDPOINT: /v1/graphql
        GRAPHQL_PLUS_SERVER_URL: 
        CUBEJS_MYSQL_API_URL: localhost:13306
        CUBEJS_PG_API_URL: localhost:15432
        CUBEJS_REST_API_URL: /api/v1/load
        CUBEJS_API_DOCS_URL: http://localhost:4000/docs
    restart: always
    ports:
      - 80:8888
      - 9055:9055
    depends_on:
      - hasura
      - hasura_plus
      - cubejs
      - actions
    networks:
      - synmetrix_default

  cubestore:
    image: cubejs/cubestore:${CUBESTORE_VERSION}
    restart: always
    ports:
      - 3030:3030
    environment:
      - CUBESTORE_REMOTE_DIR=/cube/data
    volumes:
      - .cubestore:/cube/data
    networks:
      - synmetrix_default

volumes:
  pgstorage-data:
  minio-data:
  redshift-data:
